From 7eb38bbb1aab5ae41911f27f6fc40a911a2ed3cb Mon Sep 17 00:00:00 2001
From: Sanghee Kim <sh0130.kim@samsung.com>
Date: Wed, 18 Sep 2019 15:02:07 +0900
Subject: [PATCH] cjson: fix CVE-2019-1010239

CVE-2019-1010239
Report : https://nvd.nist.gov/vuln/detail/CVE-2019-1010239
Patch : https://github.com/DaveGamble/cJSON/commit/be749d7efa7c9021da746e685bd6dec79f9dd99b

Signed-off-by: Sanghee Kim <sh0130.kim@samsung.com>
---
 components/cjson/cJSON/cJSON.c            |  6 +++++-
 components/cjson/cJSON/tests/misc_tests.c | 24 +++++++++++++++++++++++
 2 files changed, 29 insertions(+), 1 deletion(-)

diff --git a/components/cjson/cJSON/cJSON.c b/components/cjson/cJSON/cJSON.c
index af1e4500..5f167bf1 100644
--- a/components/cjson/cJSON/cJSON.c
+++ b/components/cjson/cJSON/cJSON.c
@@ -1837,7 +1837,7 @@ static cJSON *get_object_item(const cJSON * const object, const char * const nam
     current_element = object->child;
     if (case_sensitive)
     {
-        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
+        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
         {
             current_element = current_element->next;
         }
@@ -1850,6 +1850,10 @@ static cJSON *get_object_item(const cJSON * const object, const char * const nam
         }
     }
 
+    if ((current_element == NULL) || (current_element->string == NULL)) {
+        return NULL;
+    }
+
     return current_element;
 }
 
diff --git a/components/cjson/cJSON/tests/misc_tests.c b/components/cjson/cJSON/tests/misc_tests.c
index a0b4f7eb..eacfacd8 100644
--- a/components/cjson/cJSON/tests/misc_tests.c
+++ b/components/cjson/cJSON/tests/misc_tests.c
@@ -127,6 +127,28 @@ static void cjson_get_object_item_case_sensitive_should_get_object_items(void)
     cJSON_Delete(item);
 }
 
+static void cjson_get_object_item_should_not_crash_with_array(void) {
+    cJSON *array = NULL;
+    cJSON *found = NULL;
+    array = cJSON_Parse("[1]");
+
+    found = cJSON_GetObjectItem(array, "name");
+    TEST_ASSERT_NULL(found);
+
+    cJSON_Delete(array);
+}
+
+static void cjson_get_object_item_case_sensitive_should_not_crash_with_array(void) {
+    cJSON *array = NULL;
+    cJSON *found = NULL;
+    array = cJSON_Parse("[1]");
+
+    found = cJSON_GetObjectItemCaseSensitive(array, "name");
+    TEST_ASSERT_NULL(found);
+
+    cJSON_Delete(array);
+}
+
 static void typecheck_functions_should_check_type(void)
 {
     cJSON invalid[1];
@@ -535,6 +557,8 @@ int main(void)
     RUN_TEST(cjson_array_foreach_should_not_dereference_null_pointer);
     RUN_TEST(cjson_get_object_item_should_get_object_items);
     RUN_TEST(cjson_get_object_item_case_sensitive_should_get_object_items);
+    RUN_TEST(cjson_get_object_item_should_not_crash_with_array);
+    RUN_TEST(cjson_get_object_item_case_sensitive_should_not_crash_with_array);
     RUN_TEST(typecheck_functions_should_check_type);
     RUN_TEST(cjson_should_not_parse_to_deeply_nested_jsons);
     RUN_TEST(cjson_set_number_value_should_set_numbers);
-- 
2.17.1

